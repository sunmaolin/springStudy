<?xml version="1.0" encoding="UTF-8"?>
<!--schema/c  schema/p  为使用命名空间装配引入的文件-->
<!--scheme/util 命名空间复杂装配使用-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--bean 的id属性不是必须，若没有写，会使用全限定名#{number} forExample pojo.Role#{0}-->

    <!--构造器注入-->
    <bean id="roleConstructInject" class="pojo.Role">
        <!--index代表构造器参数的顺序-->
        <constructor-arg index="0" value="1"/>
        <constructor-arg index="1" value="孙茂林"/>
    </bean>

    <!--setter注入-->
    <bean id="setterInject" class="pojo.Role">
        <property name="roleId" value="1"/>
        <property name="roleName" value="孙茂林"/>
        <property name="note" value="太帅"/>
    </bean>

    <!--接口注入-->
    <!--比如我们使用tomcat的context.xml的数据库连接资源-->
    <bean id="interfaceInject" class="org.springframework.jndi.JndiObjectFactoryBean" lazy-init="true">
        <property name="jndiName">
            <value>java:comp/env/jdbc/ssm</value>
        </property>
    </bean>

    <!--复杂类型属性装配    注释掉的为Bean引用-->
    <bean id="complexAssembly" class="pojo.ComplexAssembly">
        <property name="id" value="1"/>
        <property name="list">
            <list>
                <!--<ref bean=""/>-->
                <value>value-list-1</value>
                <value>value-list-2</value>
            </list>
        </property>
        <property name="map">
            <map>
                <!--<entry key="bean" value-ref=""/>-->
                <entry key="key1" value="value-key-1"/>
                <entry key="key2" value="value-key-2"/>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="prop1">value-prop-1</prop>
                <prop key="prop2">value-prop-2</prop>
            </props>
        </property>
        <property name="set">
            <set>
                <!--<ref bean=""/>-->
                <value>value-set-1</value>
                <value>value-set-2</value>
            </set>
        </property>
        <property name="array">
            <array>
                <value>value-array-1</value>
                <value>value-array-2</value>
            </array>
        </property>
    </bean>

    <!--命名空间装配-->
    <!--construct c:_0 第一个都早参数  c:_1 第二个构造参数-->
    <bean id="nameSpaceInject1" class="pojo.Role" c:_0="1" c:_1="孙茂林"/>
    <!--property p:roleId p:+属性名 -->
    <bean id="nameSpaceInject2" class="pojo.Role" p:roleId="1" p:roleName="孙茂林"/>

    <!--使用util定义一个list-->
    <util:list id="list">
        <value>value-1</value>
        <value>value-2</value>
    </util:list>

    <!--这时，复杂属性装配时，就可以使用上面定义好的集合进行装配-->
    <bean id="nameSpaceComplexInject" class="pojo.ComplexAssembly" p:list-ref="list"/>

    <!--装配三方jar-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="url" value=""/>
        <!-- ... -->
    </bean>
    <!--若存在好多xml定义，我们可以在这里将其引入，然后在ApplicationConfig只引入当前的xml文件即可-->
    <!--<import resource="spring-config1.xml"/>-->
    <!--或者我们不需要定义@Component与@ComponentScan注解，直接在此定义要扫描的包-->
    <!--与@ComponentScan（basePackages=""）一致-->
    <!--<context:component-scan base-package="pojo"/>-->

    <!--相当与在配置类上添加@PropertySource，并配置占位解析类-->
    <context:property-placeholder ignore-resource-not-found="true" location="database-config.properties"/>
    <!--当存在多个properties文件时-->
    <!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <array>
                <value>database-config.properties</value>
                <value>database-config.properties</value>
            </array>
        </property>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>-->




</beans>